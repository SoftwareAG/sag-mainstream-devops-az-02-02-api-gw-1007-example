# Example Software AG Products containers building pipeline
# Fork and specialize according to need

trigger:
- main

pool:
  name: WmDevOpsTutorialAgentsPool
  vmImage: Canonical:0001-com-ubuntu-confidential-vm-focal:20_04-lts-gen2:latest

variables:
  - group: ContainerImagesBuild.Options

jobs:

- job: apigw1007multistage1
  displayName: 'API Gateway Minimal 10.7 multi staged approach'
  steps:

    # In general the provided code is reusable and will be templatized when mature enough
    # Write here the job specific parameters for now
    # This job is specialized for MSR/1011/lean
    - script: |
        JOB_SUIF_TEMPLATE="APIGateway/1007/default"
        echo "Job will use SUIF template ${JOB_SUIF_TEMPLATE}"
        echo "##vso[task.setvariable variable=JOB_SUIF_TEMPLATE;]${JOB_SUIF_TEMPLATE}"
      displayName: "Init Specifics"

    # grant execution permissions to the repository scripts
    - script: find . -type f -name "*.sh" -exec chmod u+x "{}" \;
      displayName: "Grant shell execution permissions"

    # Some variables must be propagated accross steps
    - script: |
        export JOB_SUIF_TAG=$(SUIF_TAG)
        export SUIF_FIXES_DATE_TAG=$(SUIF_FIXES_DATE_TAG)
        export MY_AZ_ACR_URL=$(MY_AZ_ACR_URL)
        ./01.setJobInitialVariables.sh
      displayName: 'Job Locals'
    
    - script: ./02.getSUIF.sh
      displayName: "Get SUIF commons"

    # get SA share secrets
    - task: DownloadSecureFile@1
      name: SASecureInfo
      displayName: 'Download secure information for images share'
      inputs: 
        secureFile: 'sa.share.secrets.sh'

    # mount SA share
    - script: ./03.mountImagesShare.sh
      displayName: 'Mount images share'

    # update ubuntu machine
    - script: ./04.prepareAgentMachine.sh
      displayName: 'System software preparation'

    # assure installation binaries
    - script: ./05.assureInstallBinaries.sh
      displayName: 'Assure installation binaries'

    # MSR license is required at build time
    - task: DownloadSecureFile@1
      name: yaiLicense
      displayName: 'Download API Gateway license'
      inputs:
        secureFile: 'yai-license.xml'

    # Containerize
    - script: ./06.containerize.sh
      displayName: 'Containerize APIGw 10.7'

    # Service Principal is required to connect to ACR
    - task: DownloadSecureFile@1
      name: acrSpCredentials
      displayName: 'Download Service Principal Credentials'
      inputs:
        secureFile: 'acr.sp.credentials.sh'

    # Containerize
    - script: ./07.pushTags.sh
      displayName: 'Push tags'

    # umount SA share
    - script: ./08.unmountShare.sh
      displayName: 'Unmount images share'
      condition: always()